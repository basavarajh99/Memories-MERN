import jwt from "jsonwebtoken";

const secret = 'test';

/*
    MiddleWare: A middleware is a function or set of functions that sits between the incoming request and the 
    final handling of that request, typically used in web applications or APIs. It acts as a bridge to process 
    requests or responses, modify them, or perform specific actions before passing them to the next stage.

    It used in Authentication and Authorization, Logging and debugging, Error Handling, Data Transformation
*/

const auth = async (req, res, next) => {
    try {
        //token which is sent from the client side is in the 1st position after we split the array
        const token = req.headers.authorization.split(' ')[1]; 
        
        const isCustomToken = token.length < 500; 
        /*
            token created from manually filling the form has length < 500
            token generated by O-Auth has length >= 500
        */

        let decodedData;

        if(token && isCustomToken){

            decodedData = jwt.verify(token, secret);
            /*
                jwt.verify() gives data from each specific token like username and id, now we know which user
                is logged-in and we are going to store his ID in req.userId
            */
            req.userId = decodedData?.id;
        } else{
            decodedData = jwt.decode(token); //for O-Auth it is going to be .decode() instead of .verify()
            req.userId = decodedData?.sub;
            /* sub is simply google's name for a specific Id that differentiates every single userId */
        }

        next(); 
        /*
            Pass the action to next step,
            ex: If the user wants to like a post, then after he clicks the like button, the like is not 
            reflected immediately because we don't know whether he has the permission to like it i.e, whether
            he is logged-in or not. 
            First we go through the auth middleware and it confirms or denies that request, so if all the
            conditions specified in the middleware are satisfied then we call next() and proceed him to post
            his like and call the like controller. 

            we use this middlewares inside routes module.
        */
       
    } catch (error) {
        console.log(error);
    }
}

export default auth;